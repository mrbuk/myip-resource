#!/bin/bash
# vim: set ft=bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$TMPDIR/myip-resource-request

cat > "$payload" <&0

methods=("fetch-uri" "resolve-resource-record")

method=$(jq -r '.source.method // ""' < "$payload")
if [ "$method" == "fetch-uri" ] || [ "$method" == "" ]; then
    uri=$(jq -r '.source.uri // ""' < "$payload")
    if [ "$uri" == "" ]; then   
        uri="https://api.ipify.org"
    fi
    current_ip=$(curl -s "$uri")

elif [ "$method" == "resolve-resource-record" ]; then
    resource_record=$(jq -r '.source.resource_record // ""' < "$payload")
    if [ "$resource_record" == "" ]; then   
        echo "Please provide 'resource_record'"
        exit 1
    fi
    current_ip=$(dig +short "$resource_record")
else
    echo "Unknown method: '$method'. Currently supported: ${methods[*]}"
    exit 1
fi

if [ "$current_ip" == "" ]; then
    echo "No IP address returned."
    exit 2
fi

previous=$(jq -r '.version // ""' < "$payload")
previous_ip=$(jq -r '.version.ip // ""' < "$payload")

# nothing exists
if [[ "$previous_ip" == "" ]]; then
    # shellcheck disable=SC2016
    jq -c -n \
        --arg ip "$current_ip" \
        --arg date "$(date -Iseconds)" \
        '[ { "ip": $ip, "date": $date } ]' >&3
# previous ip is same as current ip -> use previous object (incl. date)
elif [[ "$previous_ip" == "$current_ip" ]]; then
    # shellcheck disable=SC2016
    jq -c -n \
        --argjson previous "$previous" \
        '[ $previous ]' >&3
# previous ip is different to current up -> create a new version oject
else
    # shellcheck disable=SC2016
    jq -c -n \
        --arg ip "$current_ip" \
        --arg date "$(date -Iseconds)" \
        --argjson previous "$previous" \
        '[ $previous, { "ip": $ip, "date": $date } ]' >&3
fi
